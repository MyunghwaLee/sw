[문제]
N개의 도시가 있고, M개의 도로가 있다. 하나의 도로는 두 도시 사이를 연결하며, 임의의 두 도시를 연결하는 도로가 여러 개 있을 수 있다. 도시에는 1부터 N까지 번호가 순서대로 매겨져있고, 도로마다 지나가는데 걸리는 시간이 주어진다.



도시의 도로 정보가 주어졌을 때, 1번 도시에서 N번 도시로 가는 최소 시간을 프로그램을 작성하시오.



[입력]
입력 파일에는 여러 테스트 케이스가 포함될 수 있다. 파일의 첫째 줄에 케이스의 개수 T가 주어지고, 이후 차례로 T개 테스트 케이스가 주어진다. (1 ≤ T ≤ 20) 각 케이스의 첫 줄에 도시의 수 N과 도로의 수 M이 공백으로 구분되어 주어진다. (1 ≤ N ≤ 100,000, 1 ≤ M ≤ 300,000)
그리고 다음 M개의 줄에 각 도로에 대한 정보를 나타내는 세 정수가 공백으로 구분되어 주어진다. "a b c"라고 주어졌을 때 a번 도시와 b번 도시를 연결하는 도로가 존재하며, 그 도로를 지나는데 걸리는 시간이 c라는 것을 의미한다. (1 ≤ a, b ≤ N, 1 ≤ c ≤ 10,000, a ≠ b)



[출력]
각 테스트 케이스의 답을 순서대로 표준출력으로 출력하며, 각 케이스마다 줄의 시작에 “#x”를 출력하여야 한다. 이때 x는 케이스의 번호이다. 같은 줄에, 1번 도시에서 N번 도시로 가는 최소 시간을 출력한다. 만약 1번 도시에서 N번 도시로 갈 수 없다면 -1을 출력한다.



[입출력 예]
(입력)
2     ← 2 test cases in total
3 3   ← 1st case
1 2 3
2 3 1
1 3 2
6 9   ← 2nd case
1 2 2
1 3 4
2 3 1
2 5 2
2 4 4
3 5 3
4 5 3
4 6 2
5 6 2



(출력)
#1 2
#2 6

-------------------------------------------------------------------------
(fail ver source)

// 5/16 Fail

#include <stdio.h>
#include <vector>
#include <queue>
#define INT_MAX 2100000000
using namespace std;

int T,N,M,a,b,c;
vector<pair<int,int> > edge[300001];
int dist[100001];
int visited[100001];

// 거리 작은것부터 뽑으려면 second 내림차순 
struct compare {
	bool operator()(pair<int,int> a, pair<int,int> b) {
		return a.second > b.second;
	}
};

void search (int start) {
	priority_queue<pair<int,int>, vector<pair<int,int> >, compare> pq;
	dist[start] = 0;
	pq.push(make_pair(start, 0));
	
	while(!pq.empty()) {
		int from = pq.top().first;
		int from_time = pq.top().second;
		//printf("pq.top = %d, %d\n", from, from_time);
		pq.pop();
		
		if(from == N) break;
		visited[from] = 1; 
		
		for(int temp=0; temp<edge[from].size(); temp++) {
			int to = edge[from][temp].first;
			int to_time = from_time + edge[from][temp].second;
			
			if(dist[to] > to_time && visited[to] != 1) {
				dist[to] = to_time;
				pq.push(make_pair(to, to_time));
				//printf("pq.push (%d, %d)\n", to, to_time);
			}
		}
	}
}

int main() {
	scanf("%d", &T);
	for(int i=1; i<=T; i++) {

		scanf("%d %d", &N, &M);
		
		for(int k=0; k<=N; k++) {
			dist[k] = INT_MAX;
			visited[k] = 0;
		}
		for(int k=0; k<=M; k++) {
			edge[k].clear();
		}
		
		for(int j=0; j<M; j++) {
			scanf("%d %d %d", &a, &b, &c);
			edge[a].push_back(make_pair(b,c));
		}
		
		search(1);
		
		if(dist[N] == INT_MAX)
			printf("#%d -1\n", i);
		else
			printf("#%d %d\n", i, dist[N]);
	}
}
